#!/bin/bash

# Include hestia functions
# shellcheck source=/usr/local/hestia/func/main.sh
source $HESTIA/func/main.sh

#----------------------------------------------------------#
#                    Variable&Function                       #
#----------------------------------------------------------#

# Argument definition
user=$1
domain=$2

# Includes
source $HESTIA/conf/hestia.conf

check_args '2' "$#" 'USER DOMAIN'
is_format_valid 'user' 'domain'
is_object_valid 'user' 'USER' "$user"
is_object_unsuspended 'user' 'USER' "$user"

# Check if domain exists in user's account
if [ ! -f "$HESTIA/data/users/$user/dns/$domain.conf" ]; then
    check_result $E_NOTEXIST "DNS domain $domain doesn't exist"
fi

# Create PHP wrapper for zone creation
php_script=$(cat <<EOF
<?php
require_once '/usr/local/hestia/web/src/init.php';
require_once '/usr/local/hestia/web/src/app/System/CloudflareAPI.php';

// Read config file
\$config_file = '/usr/local/hestia/data/users/$user/cloudflare/cloudflare.conf';
if (!file_exists(\$config_file)) {
    exit(1);
}

\$config = parse_ini_file(\$config_file);
if (!\$config || !isset(\$config['API_TOKEN'])) {
    exit(1);
}

// Initialize API
\$api = new \Hestia\System\CloudflareAPI(\$config['API_TOKEN']);

// Check if zone already exists
\$zoneId = \$api->getZoneId('$domain');
if (\$zoneId !== false) {
    echo "Zone already exists with ID: \$zoneId\n";
    exit(0);
}

// Create zone
\$settings = [
    'type' => 'full',
    'jump_start' => true
];

\$zone = \$api->createZone('$domain', \$settings);
if (\$zone === false) {
    fwrite(STDERR, "Failed to create zone: " . \$api->getLastError() . "\n");
    exit(1);
}

// Configure initial settings
\$zoneId = \$zone['id'];
\$defaultSettings = [
    'ssl' => 'full',
    'always_use_https' => 'on',
    'min_tls_version' => '1.2'
];

\$result = \$api->updateZoneSettings(\$zoneId, \$defaultSettings);
if (\$result === false) {
    fwrite(STDERR, "Warning: Failed to update zone settings: " . \$api->getLastError() . "\n");
}

// Output zone information
echo json_encode([
    'id' => \$zone['id'],
    'name' => \$zone['name'],
    'status' => \$zone['status'],
    'name_servers' => \$zone['name_servers']
], JSON_PRETTY_PRINT);
EOF
)

# Execute PHP script
result=$(echo "$php_script" | php)
if [ $? -ne 0 ]; then
    check_result $E_CONNECT "Failed to add Cloudflare zone"
fi

# Parse nameservers from result
nameservers=$(echo "$result" | jq -r '.name_servers[]')

# Update user's DNS template to use Cloudflare nameservers
for ns in $nameservers; do
    $BIN/v-change-user-ns "$user" "$ns"
done

#----------------------------------------------------------#
#                       Hestia                              #
#----------------------------------------------------------#

# Logging
$BIN/v-log-action "$user" "Info" "DNS" "Added domain $domain to Cloudflare."

# Print zone information
echo "$result"

exit